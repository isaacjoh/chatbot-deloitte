Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.resolve = resolve;
exports['default'] = modularize;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('./fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodashModules = require('./lodashModules');

var _lodashModules2 = _interopRequireDefault(_lodashModules);

var _parseForModules = require('./parseForModules');

var _parseForModules2 = _interopRequireDefault(_parseForModules);

var _lodash = require('lodash');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _esperantoBuild = require('./esperanto-build');

var _esperantoBuild2 = _interopRequireDefault(_esperantoBuild);

var _cliBuild = require('./cli-build');

var _cliBuild2 = _interopRequireDefault(_cliBuild);

var glob = _bluebird2['default'].promisify(require('glob'));

var defaultOpts = require('../defaults.json');

function resolve(files, options) {
  return _bluebird2['default'].map(files, function (file) {
    return _fs2['default'].readFileAsync(file).then(function (blob) {
      return (0, _parseForModules2['default'])(blob, file, options);
    });
  }).then(function (methods) {
    return (0, _lodash.uniq)((0, _lodash.flatten)(methods).sort(), true);
  });
}

function modularize(fileGlob, options) {
  var files = ((0, _lodash.isArray)(fileGlob) ? _bluebird2['default'].resolve(fileGlob) : glob(fileGlob)).then(function (files) {
    return resolve(files, options);
  });

  options = (0, _lodash.defaults)({}, options, defaultOpts);

  return _bluebird2['default'].all([files, _lodashModules2['default']]).spread(function (methods, modules) {
    // What to do with the resulting methods (e.g. export, list, etc)
    if (options.list) {
      return methods;
    }
    var code = undefined;
    if (options.compile) {
      code = (0, _cliBuild2['default'])(methods, options);
    } else {
      code = (0, _esperantoBuild2['default'])(methods, modules, options).code;
    }
    var $code = _bluebird2['default'].resolve(code).then(function ($code) {
      code = String($code);
      return code;
    });
    if (options.output) {
      $code = $code.then(function (code) {
        return _fs2['default'].writeFileAsync(options.output, code);
      });
    }
    return $code.then(function () {
      return {
        code: code,
        methods: methods
      };
    });
  });
}

module.exports = modularize;