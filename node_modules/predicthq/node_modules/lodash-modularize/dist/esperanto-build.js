Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = build;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _esperanto = require('esperanto');

var _esperanto2 = _interopRequireDefault(_esperanto);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path2 = require('path');

var _path3 = _interopRequireDefault(_path2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodashCliLibMapping = require('lodash-cli/lib/mapping');

var _lodashChainable = require('./lodash-chainable');

var _lodashChainable2 = _interopRequireDefault(_lodashChainable);

var buildPath = _path3['default'].join(__dirname, '../templates/import-build.tpl');
var chainPath = _path3['default'].join(__dirname, '../templates/chain-build.tpl');
var normalTemplate = (0, _lodash.template)(_fs2['default'].readFileSync(buildPath));
var chainTemplate = (0, _lodash.template)(_fs2['default'].readFileSync(chainPath));

function build(methods, modules, options) {
  var chainBuild = (0, _lodash.includes)(methods, 'chain');

  var _path = (0, _lodash.result)(options, 'lodashPath');
  if (_path) {
    var _path$parse = _path3['default'].parse(_path);

    // Don't rel a cjs import
    var ext = _path$parse.ext;
    var dir = _path$parse.dir;
    var _name = _path$parse.name;
    var base = _path$parse.base;
    if (options.output != null && (ext !== '' || dir !== '' || _name !== base)) {
      _path = _path3['default'].relative(_path3['default'].dirname(options.output), _path);
    }
  } else {
    _path = (0, _lodash.first)(options.lodash);
  }

  if (options.useNpmModules && chainBuild) {
    throw new Error('Cannot currently use npm modules with a library using chaining');
  }

  // Otherwise compile a file for them to the modularization
  var config = _lodash2['default'].chain(methods).map(function (name) {
    for (var category in modules) {
      if ((0, _lodash.includes)(modules[category], name)) {
        break;
      }
    }
    var realName = (0, _lodash.result)(_lodashCliLibMapping.aliasToReal, name, name);
    return {
      name: name,
      propString: name + ': ' + name,
      path: options.useNpmModules ? 'lodash.' + realName.toLowerCase() : _path3['default'].join(_path, category, realName),
      chained: _lodashChainable2['default'][name]
    };
  }).partition(function (node) {
    return (/\/chain\//.test(node.path)
    );
  }).value();

  var template = chainBuild ? chainTemplate : normalTemplate;
  var code = template({
    config: config[1],
    chainMethods: config[0],
    lodashPath: _path
  });

  var opts = {
    _evilES3SafeReExports: true,
    strict: false,
    name: options.global || '_'
  };
  switch (options.exports) {
    case 'cjs':
      return _esperanto2['default'].toCjs(code, opts);
    case 'amd':
      return _esperanto2['default'].toAmd(code, opts);
    case 'umd':
      return _esperanto2['default'].toUmd(code, opts);
    case 'es6':
      return { code: code };
  }
  throw 'Unsupported format: ' + options.exports;
}

module.exports = exports['default'];